#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric> //std::accumulate
#include <functional> //std::accumulate

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);


/*
 * Complete the 'getNodeToRemove' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. UNWEIGHTED_INTEGER_GRAPH g
 *  2. INTEGER_ARRAY malware
 */

/*
 * For the unweighted graph, <name>:
 *
 * 1. The number of nodes is <name>_nodes.
 * 2. The number of edges is <name>_edges.
 * 3. An edge exists between <name>_from[i] and <name>_to[i].
 *
 */

int getNodeToRemove(int g_nodes, vector<int> g_from, vector<int> g_to, vector<int> malware) {
    vector<vector<int>> adj(g_nodes + 1);
    for (size_t i = 0; i < g_from.size(); ++i) {
        int u = g_from[i];
        int v = g_to[i];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    int min_infected = g_nodes + 1;
    int node_to_remove = 1; // Default to the lowest index node
    
    for (int u = 1; u <= g_nodes; ++u) {
        vector<int> infected(g_nodes + 1, 0); // 1-based indexing
        queue<int> q;
        
        for (int i = 1; i <= g_nodes; ++i) {
            if (i != u && malware[i - 1] == 1) {
                infected[i] = 1;
                q.push(i);
            }
        }
        
        while (!q.empty()) {
            int v = q.front();
            q.pop();
            for (auto w : adj[v]) {
                if (w != u && infected[w] == 0) {
                    infected[w] = 1;
                    q.push(w);
                }
            }
        }
        
        int total_infected = accumulate(infected.begin(), infected.end(), 0);
        
        if (total_infected < min_infected) {
            min_infected = total_infected;
            node_to_remove = u;
        } else if (total_infected == min_infected && u < node_to_remove) {
            node_to_remove = u;
        }
    }
    
    return node_to_remove;
}
int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string g_nodes_edges_temp;
    getline(cin, g_nodes_edges_temp);

    vector<string> g_nodes_edges = split(rtrim(g_nodes_edges_temp));

    int g_nodes = stoi(g_nodes_edges[0]);
    int g_edges = stoi(g_nodes_edges[1]);

    vector<int> g_from(g_edges);
    vector<int> g_to(g_edges);

    for (int i = 0; i < g_edges; i++) {
        string g_from_to_temp;
        getline(cin, g_from_to_temp);

        vector<string> g_from_to = split(rtrim(g_from_to_temp));

        int g_from_temp = stoi(g_from_to[0]);
        int g_to_temp = stoi(g_from_to[1]);

        g_from[i] = g_from_temp;
        g_to[i] = g_to_temp;
    }

    string malware_count_temp;
    getline(cin, malware_count_temp);

    int malware_count = stoi(ltrim(rtrim(malware_count_temp)));

    vector<int> malware(malware_count);

    for (int i = 0; i < malware_count; i++) {
        string malware_item_temp;
        getline(cin, malware_item_temp);

        int malware_item = stoi(ltrim(rtrim(malware_item_temp)));

        malware[i] = malware_item;
    }

    int result = getNodeToRemove(g_nodes, g_from, g_to, malware);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        std::find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}

